// Gateway protocol
//
// This is a prototype for a gateway protocol.  Try to keep the protocol as minimal
// as possible so it is as easy as possible to understand, maintain and implement.
//
syntax = "proto3";
package gwpb;

option go_package = "pkg/gwpb";

// Type enum represents the package types in the protocol.
enum Type {
	UNKNOWN      = 0;
	MEASUREMENT  = 1;
	CONFIG       = 2;
}

// Packet represents the top level envelope of the protocol.
message Packet {
	uint64 id = 1;
	Type   type = 2;
	uint64 from = 3;
	uint64 to = 4;
	uint64 timestamp = 5;
	oneof payload {
		Samples samples = 11;
	}	
}

// Value is a generic value that can be of various types.
message Value {
	oneof value {
		uint64 uint64_val = 4;
		uint32 uint32_val = 5;
		uint64 int64_val  = 6;
		uint32 int32_val  = 7;
		float  float_val  = 8;
		string string_val = 9;
		bytes  bytes_val  = 10;
	}
}

// A sample is a single sensor value from a given node.
message Sample {
	uint64 node_id     = 1;
	uint64 timestamp   = 2;
	uint64 sensor_type = 3;
	Value  value       = 4;
}

// Samples is a collection of samples.  Each sample can be from a different
// node.  This supports aggregating samples from different nodes in the gateway
// and sending multiple samples in the same packet.
message Samples {
	repeated Sample samples   = 2;
}

// Config contains a set of key-value pairs of config.
message Config {
	int64             node_id = 1;
	map<string,Value> config  = 2;
}